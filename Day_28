Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.

def maxCircularSubarraySum(arr):
    def kadane(array):
        max_ending_here = max_so_far = array[0]
        for x in array[1:]:
            max_ending_here = max(x, max_ending_here + x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far

    def min_kadane(array):
        min_ending_here = min_so_far = array[0]
        for x in array[1:]:
            min_ending_here = min(x, min_ending_here + x)
            min_so_far = min(min_so_far, min_ending_here)
        return min_so_far

    total_sum = sum(arr)
    max_kadane = kadane(arr)
    min_kadane_value = min_kadane(arr)
    
    if total_sum == min_kadane_value: 
        return max_kadane
    
    max_circular = total_sum - min_kadane_value
    return max(max_kadane, max_circular)
