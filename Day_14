Given a singly linked list, the task is to find the middle of the linked list. If the number of nodes are even, then there would be two middle nodes, so return the second middle node


Solution

class Node:
    def __init__(self, x):
        self.data = x
        self.next = None


def getLength(head):

    
    length = 0

    
        length += 1
        head = head.next

    
    return length


def getMiddle(head):

    
    length = getLength(head)

    
    mid_index = length // 2
    while mid_index:
        head = head.next
        mid_index -= 1

    
    return head.data

def main():

    
    head = Node(10)
    head.next = Node(20)
    head.next.next = Node(30)
    head.next.next.next = Node(40)
    head.next.next.next.next = Node(50)
    head.next.next.next.next.next = Node(60)

    print(getMiddle(head))

if __name__ == "__main__":
    main()
